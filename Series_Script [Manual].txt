library(GEOquery)
library(hgu133plus2.db)
library(hgu133acdf)
library(limma)
library(hgu133plus2cdf)
library(GSEABase)
library(GOstats)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(curl)
library(RCurl)
library(affy)
library(readr)
library(hgu133a.db)
library(genefilter)
library(multtest)
library(affyPLM)
library(pheatmap)
library(pacman)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(Biobase)
library(stats)

# Then load series and platform data from GEO ...
set <- getGEO("GSE12279", GSEMatrix =TRUE)


gset <- set
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]

# Check what we have

head(gset)
str(gset)
length(gset)
exprs(gset)[1:3,] ## print the expression data
pData(gset)[1:6,18] ## print the sample information
colnames(pData(gset))
fData(gset)[1:3,1:2] ## print the gene annotation

# Exploratory analysis  1- histogram
cols=seq(1:length(sampleNames(gset)))
hist(gset,main = "Histogram affyData_GSE178",col=cols)
legend(12,0.9, sampleNames(gset),col=cols,lty=1, lwd=2,cex=0.5)

# Exploratory analysis  2- box plots
boxplot(gset,main = "Box Plot GSE178",col=seq(1:23))

## *** There is no thing to do! The data is normalized ***
res <- exprs(gset)

write.table(res, file="rma_norm_data.txt", sep="\t", row.names=T, col.names=NA)

#---------------------------------------------------------------

tT <- read_delim("rma_norm_data.txt", "\t", escape_double = FALSE, trim_ws = TRUE)


names(tT)[1]="ID" # to rename the first col to prob_id

# load NCBI platform annotation
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))


mapper <- subset(ncbifd, select=c("ID","GENE_SYMBOL"))
head(mapper)
# replace original platform annotation
tT <- tT[setdiff(colnames(tT), setdiff(fvarLabels(gset), "ID"))]
tT <- merge(tT,mapper,by="ID",all.x=T)


# do i need the probe id again?  no, then let's drop it
tT2 =tT[,-1]

# remove nulls : some probes were not mapped to any gene symbol
tT2=tT2[ ! is.na(tT2$GENE_SYMBOL),]



# check duplciation of of gene symbols?  
x=duplicated(tT2$GENE_SYMBOL)  
sum(x)


### yes .. why ? probesets?  solutions : aggregation
exp.data=tT2[-dim(tT2)[2]]
exp.data=apply(exp.data,2, as.numeric)

####remove duplication
exp.data.agg= aggregate(exp.data, list(tT2$GENE_SYMBOL),FUN=mean)
names(exp.data.agg)

rownames(exp.data.agg)=exp.data.agg$Group.1
exp.data.agg=exp.data.agg[- 1]


#save the object in a RDATA file
save(exp.data.agg,file="processed.RDATA")

# ===== (without detailed explanation) ===========

colnames(exp.data.agg)

df <- select(exp.data.agg, GSM308493, GSM308495, GSM308494,GSM308496)
df <- select(exp.data.agg, GSM308493,GSM308494)


# Group names for all samples
sml <- df[1:4]
ctrl.indecies= c(1:2) #### or  seq(from=9,to=dim(exp)[2])
case.indecies=c(3:4)


## calculating LFC [log2 foldchanges ]
lfc.diff=apply(sml,1, function(x)  mean(x[case.indecies]) -mean(x[ctrl.indecies]))
x=as.data.frame(sml)

## calcualting p values
f=factor( c( rep(1, length(ctrl.indecies)) , rep(2, length(case.indecies)) ))
t.pval=rowttests(as.matrix(sml),f)$p.value


# Function to calculate adjusted p-values using Benjamini-Hochberg method
benjamini_hochberg <- function(p_values) {
  n <- length(p_values)
  adj_p_values <- p.adjust(p_values, method = "BH")
  return(adj_p_values)
}
adj_p_values <- benjamini_hochberg(t.pval)


res=as.data.frame(cbind(lfc.diff,t.pval))


#####  selection criteria for identifying DEGS
degs.res=res[t.pval<0.05,]  ##### identify DEGs based on teh significance level only
degs.res=res[abs(lfc.diff) > log2(2),]  ##### identify DEGs based on the LFC only
degs.res=res[abs(lfc.diff) >= 2  & t.pval  <= 0.05,]  ##### identify DEGs based on both  LFC and the significane level 

degs.res_UP=res[lfc.diff >= 2   & t.pval <= 0.05,]  
degs.res_DOWN=res[lfc.diff <= -2   & t.pval <= 0.05,] 


degs.genes= rownames(degs.res)
dim(degs.res_UP)
#export them for further analysis in DAVID
write.table(degs.genes,file = "DEGs.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)

### creating a heatmap
#------------------------------------------------------------


#  get the expression profiles of the degs only

exp.degs=sml[rownames(sml) %in% degs.genes, ]
dsm=exp.degs

colnames=colnames(dsm)
ctrl.vector=rep("Ctrl", length(ctrl.indecies))
case.vector=rep("Case", length(case.indecies))
Sample=c( ctrl.vector, case.vector)

annotation=as.data.frame(Sample)
rownames(annotation)=colnames
annotation

# Specify colors
Sample = c("lightgreen", "navy")
names(Sample) = c("Ctrl", "Case")
ann_colors = list(Sample = Sample)

m2=scale(t(dsm),center=T,scale=T)

m2=t(m2)

pheatmap(m2, annotation = annotation, annotation_colors = ann_colors,fontsize_row = 5,fontsize_col = 9)
heatmap.2(m2, cexCol=0.7,col = rev(redblue(26)), scale = "row")

####  up & Down Regulated Genes "Volcano plots"
#------------------------------------------------------------
summary(res$lfc.diff) 

res2 <- res %>%
  mutate(gene_type = case_when(lfc.diff >= 2  & t.pval <= 0.05 ~ "up",
                               lfc.diff <= -2  & t.pval <= 0.05 ~ "down",
                               TRUE ~ "ns"))   

# Obtain gene_type counts 
res2 %>% count(gene_type)


cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey") 
sizes <- c("up" = 2, "down" = 2, "ns" = 1) 
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)


res2 %>%
  ggplot(aes(x = (lfc.diff),
             y = -log10(t.pval),
             fill = gene_type,    
             size = gene_type,
             alpha = gene_type)) + 
  geom_point(shape = 21, # Specify shape and colour as fixed local parameters    
             colour = "black") + 
  geom_hline(yintercept = (0.05),
             linetype = "dashed") + 
  geom_vline(xintercept = c(-2, 2),
             linetype = "dashed") +
  scale_fill_manual(values = cols) + # Modify point colour
  scale_size_manual(values = sizes) + # Modify point size
  scale_alpha_manual(values = alphas) + # Modify point transparency
  scale_x_continuous(breaks = c(seq(-7, 7, 2)),       
                     limits = c(-7, 7)) 
