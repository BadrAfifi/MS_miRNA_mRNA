hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
class(Illum_data)
Illum_data <- as.matrix(data)
class(Illum_data)
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
Illum_data <- log(as.matrix(data))
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
# Read the file into a data frame
data <- read.table(file_path, header = TRUE, sep = "\t", row.names = 1)
View(data)
class(data)
Illum_data <- ExpressionSet(assayData = as.matrix(data))
View(Illum_data)
class(Illum_data)
# 1- histogram
cols=seq(1:length(sampleNames(Illum_data)))
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
legend(12,0.9, sampleNames(gse2),col=cols,lty=1, lwd=2,cex=0.5)
BiocManager::install("lumi")
exprs(Illum_data)
# Create a LumiBatch object
lumi_data <- lumiR(as.matrix(data))
library(lumi)
# Create a LumiBatch object
lumi_data <- lumiR(as.matrix(data))
# Create a LumiBatch object
lumi_data <- lumiR(as.matrix(data))
data2 <- as.matrix(data)
# Create a LumiBatch object
lumi_data <- lumiR(data2)
# Read the file into a data frame
data <- read.table(file_path, header = TRUE, sep = "\t", row.names = 1)
data2 <- as.matrix(data)
# Create a LumiBatch object
lumi_data <- lumiR(data2)
data2 <- as.matrix(data)
# Create a LumiBatch object
lumi_data <- lumiR(data2)
file.exists(data2)
lumiR(data2)
lumiR(data2)
# Read the file into a data frame
data <- read.table(file_path, header = TRUE, sep = "\t", row.names = 1)
class(data)
# Create a LumiBatch object
lumi_data <- lumiR(data)
data2 <- as.matrix(data)
# Create a LumiBatch object
lumi_data <- lumiR(data2)
Illum_data <- ExpressionSet(assayData = as.matrix(data))
class()
exprs(Illum_data)
pData(Illum_data)
data2 <- as.matrix(log2(data))
View(data2)
lumi_data <- lumiR(data2)
Illum_data <- ExpressionSet(assayData = data2)
exprs(Illum_data)
normalizeBetweenArrays(Illum_data,method="quantile")->mydataQuantile
class(Illum_data)
BiocManager::install("preprocessCore")
library(preprocessCore)
# 1- histogram
cols=seq(1:length(sampleNames(Illum_data)))
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
legend(12,0.9, sampleNames(Illum_data),col=cols,lty=1, lwd=2,cex=0.5)
eset <- normalize.quantiles(Illum_data)
eset <- normalize.quantiles(exprs(Illum_data))
hist(eset ,main = "Histogram *Normalized data* ",col=cols)
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
# 2- box plots
boxplot(gse2, main = "Box Plot *Normalized data*",col=seq(1:23))
# 2- box plots
boxplot(Illum_data, main = "Box Plot *Normalized data*",col=seq(1:23))
status <- sampleNames(Illum_data)
status
sampleInfo <- as.data.frame(status)
status <- c(rep("CIS", 49),rep("HC", 40),rep("PP", 23),rep("RR", 48),rep("SP", 21),rep("RR", 5))
sampleInfo <- as.data.frame(status)
names(sampleInfo)[1]="Condition" # rename column 1
rownames(sampleInfo) <- (sub("\\.CEL$", "", sampleNames(Illum_data))
rownames(sampleInfo) <- sampleNames(Illum_data)
sampleInfo
corMatrix <- cor(exprs(Illum_data),use="c") ## argument use="c" stops an error if there are any missing data points
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo, main = "Raw data",fontsize_row = 3,fontsize_col = 3)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(Illum_data)),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=Condition,label=paste("Condition", Condition))) + geom_point()
# 5.2 -Multidimensional scaling plot of distances between gene expression profiles
plotMDS(exprs(Illum_data), labels = sampleInfo[,"Condition"],
gene.selection = "common", main = "Raw data")
# 1- histogram
cols=seq(1:length(sampleNames(Illum_data)))
hist(Illum_data ,main = "Histogram *Normalized data* ",col=cols)
# 2- box plots
boxplot(Illum_data, main = "Box Plot *Normalized data*",col=seq(1:23))
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo, main = "Raw data",fontsize_row = 3,fontsize_col = 3)
#**** A complementary approach is to use Principal Components Analysis (PCA).
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(Illum_data)),)
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=Condition,label=paste("Condition", Condition))) + geom_point()
# 5.2 -Multidimensional scaling plot of distances between gene expression profiles
plotMDS(exprs(Illum_data), labels = sampleInfo[,"Condition"],
gene.selection = "common", main = "Raw data")
# -- Check the expression data
# -- check values
sum(!complete.cases(exprs(Illum_data))) # check if there is a missing values.
sum(is.na(exprs(Illum_data)))# check if there is NAN
#### mapping the probe ids into gene symbole
#### First of all, you should know what the data annotation is by annotation()
exprData1 <- bind_cols(rownames(exprs(Illum_data)),exprs(Illum_data))
row.names(exprData1) <- NULL
names(exprData1)[1]="probe_id" # to rename the first col to prob_id
View(exprData1)
#   ---- Getting the Gene Symbols
# A-
annotation(Illum_data)
#   ---- Getting the Gene Symbols
# A-
# from meta data; Illumina humanRef-8 v2.0 expression beadchip
gpl <- getGEO("GPL6104")
anno <- Table(gpl)
View(anno)
colnames(anno)
anno <- anno %>% dplyr::select ("Symbol")
map.df <- bind_cols(anno$ID,gene_symbol)
View(anno)
View(anno)
anno <- Table(gpl)
colnames(anno)
View(anno)
View(exprData1)
anno <- anno %>% dplyr::select ("ID","Symbol")
View(anno)
anno <- Table(gpl)
colnames(anno)
map.df <- anno %>% dplyr::select ("ID","Symbol")
row.names(map.df) <- NULL
names(map.df)[1]="probe_id"
names(map.df)[2]="symbol"
View(map.df)
#    ---- Then:
# merge the two data frames to have the symbole annotation in the data object
exprData2 <- merge(exprData1,map.df,by="probe_id",all.x=T)
View(exprData2)
View(map.df)
# do i need the probe id again?  no, then let's drop it
exprData2=exprData2[,-1]
# remove nulls : some probes were not mapped to any gene symbol
sum(is.na(exprData2$symbol))
exprData2 <- exprData2[ ! is.na(exprData2$symbol),]
dim(exprData2)
# check duplciation of of gene symbols?
sum(duplicated(exprData2$symbol))
### yes .. why ? probesets?  solutions : aggregation
agg_exprData= aggregate(exprData2, list(exprData2$symbol),FUN=mean)
dim(agg_exprData)
rownames(agg_exprData) <- agg_exprData[,1]# to rename the gene symbols as rownames
agg_exprData <- agg_exprData[,-1] # remove the gene symbols as a column
agg_exprData$symbol <- NULL # remove the gene symbols as a column
design <- model.matrix(~0+sampleInfo$Condition)
design
colnames(design) <- c("CIS","HC","PP","RR","SP") ## rename the columns to select them easly later
design
#***Coping with outliers
#It is tempting to discard any arrays which seem to be outliers prior to differential expressions.
#However, this is done at the expense of sample-size which could be an issue for small experiments.
#A compromise, which has been shown to work well is to calculate **weights to define the reliability of each sample.
aw <- arrayWeights(agg_exprData,design)
aw
fit <- lmFit(agg_exprData, design,weights = aw)
head(fit$coefficients)
##In order to perform the differential analysis, we have to define the contrast that we are interested in. In our case we only have two groups and one contrast of interest.
##Multiple contrasts can be defined in the makeContrasts function
# Case - Healthy (HC): gene expression of Case relative to the healthy.
# Healthy (HC) - Case: gene expression of healthy relative to the Case.
contrasts <- makeContrasts(CIS - HC,
PP - HC,
RR - HC,
SP - HC,
levels=design)
fit2 <- contrasts.fit(fit, contrasts)
##Finally, apply the empirical Bayesâ€™ step
##to get our differential expression statistics and p-values.
fit2 <- eBayes(fit2)
head(fit2$coefficients)
#If we want to know how many genes are differentially-expressed overall
#we can use the decideTests function.
table(decideTests(fit2))
topTable(fit2, coef=1) ## topTable(fit2, coef=2) ### to see the results of the second contrast (if it exists)
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="fdr",sort.by="none") # Cancer - Healthy
top2 <- limma::topTable(fit2, coef=2, number=nrow(fit2), adjust.method="BH",sort.by="none") #Healthy - Cancer
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
# select the Comparison items
full_results <- as.data.frame(top1) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
View(degs.res)
View(degs.res_UP)
# select the Comparison items
full_results <- as.data.frame(top2) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
## to perform adjust.method="fdr" FDR means ***Benjamini & Hochberg (1995) ("BH")***
top1 <- limma::topTable(fit2, coef=1, number=nrow(fit2), adjust.method="fdr",sort.by="none") #CIS - HC,
top2 <- limma::topTable(fit2, coef=2, number=nrow(fit2), adjust.method="BH",sort.by="none") #PP - HC,
top3 <- limma::topTable(fit2, coef=3, number=nrow(fit2), adjust.method="fdr",sort.by="none") #RR - HC,
top4 <- limma::topTable(fit2, coef=4, number=nrow(fit2), adjust.method="BH",sort.by="none") #SP - HC,
# select the Comparison items
full_results <- as.data.frame(top2) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
View(degs.res)
View(degs.res_UP)
View(degs.res_DOWN)
# select the Comparison items
full_results <- as.data.frame(top3) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
# select the Comparison items
full_results <- as.data.frame(top3) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
# select the Comparison items
full_results <- as.data.frame(top4) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
View(degs.res_UP)
# select the Comparison items
full_results <- as.data.frame(top2) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
View(degs.res_UP)
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
View(degs.res_DOWN)
# select the Comparison items
full_results <- as.data.frame(top1) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
View(degs.res_UP)
library(GEOquery)
library(GSEABase)
library(GOstats)
library(Biobase)
library(limma)
library(lumi)
library(preprocessCore)
library(affy)
library(affyPLM)
library(frma)
library(ggplot2)
library(gplots)
library(pheatmap)
library(magrittr)# needs to be run every time you start R and want to use %>%
library(dplyr)# alternatively, this also loads %>%
library(RColorBrewer)
library(curl)
library(RCurl)
library(genefilter)
library(readr)
library(multtest)
library(pacman)
# select the Comparison items
full_results <- as.data.frame(top1) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
# select the Comparison items
full_results <- as.data.frame(top2) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
# select the Comparison items
full_results <- as.data.frame(top3) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
# select the Comparison items
full_results <- as.data.frame(top4) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
# select the Comparison items
full_results <- as.data.frame(top1) #Case-Healthy
degs.res= full_results[abs(full_results$logFC) >= 1  & full_results$adj.P.Val <= 0.05, ]
degs.res_UP=full_results[full_results$logFC >= 1   & full_results$adj.P.Val <= 0.05,]
degs.res_DOWN=full_results[full_results$logFC  <= -1   & full_results$adj.P.Val <= 0.05,]
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
write.table(rownames(degs.res_UP),file = "DEGs_UP.txt",row.names = F,col.names = F,quote = F)
write.table(rownames(degs.res_DOWN),file = "DEGs_DOWN.txt",row.names = F,col.names = F,quote = F)
res2 <- full_results %>%
mutate(gene_type = case_when(logFC >= 1  & adj.P.Val <= 0.05 ~ "up",
logFC <= -1  & adj.P.Val <= 0.05 ~ "down",
TRUE ~ "ns"))
cols <- c("up" = "#FF0000", "down" = "#00FF00", "ns" = "grey")
sizes <- c("up" = 2, "down" = 2, "ns" = 1)
alphas <- c("up" = 1, "down" = 1, "ns" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(adj.P.Val),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
##In order to perform the differential analysis, we have to define the contrast that we are interested in. In our case we only have two groups and one contrast of interest.
##Multiple contrasts can be defined in the makeContrasts function
# Case - Healthy (HC): gene expression of Case relative to the healthy.
# Healthy (HC) - Case: gene expression of healthy relative to the Case.
contrasts <- makeContrasts((CIS,PP) - HC,
##In order to perform the differential analysis, we have to define the contrast that we are interested in. In our case we only have two groups and one contrast of interest.
##Multiple contrasts can be defined in the makeContrasts function
# Case - Healthy (HC): gene expression of Case relative to the healthy.
# Healthy (HC) - Case: gene expression of healthy relative to the Case.
contrasts <- makeContrasts(c(CIS,PP) - HC,
PP - HC,
RR - HC,
SP - HC,
levels=design)
contrasts
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(tidyverse)
# Plot dispersion estimates
plotDispEsts(dds2)
View(degs.res)
